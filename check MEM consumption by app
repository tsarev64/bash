#!/bin/bash
# -gt больше
# -ge больше или равно
# -lt меньше
#Переменные
#Задаем переменную времени и даты.
d=$(date +%d.%m.%Y\ %H:%M:%S)
#Переменная названия приложения
app_name="openam"
#Переменная лимита, с этим значением сравнивается потребление ресурса приложением.
mem_limit="870"
#Переменная в которую записывается потребление CPU
# grep $app_name из вывода ps aux мы ищем наше приложение
#grep -v grep означает, что в вывод команды не включается grep, используемый для фильтрации.
#awk {'print $3*100'} выбирет значения из 3 столбца и умножает на 100 для получения целого числа
#Столбцы разделены пробелами, для памяти будет 4.
app_cpu_have=`ps aux | grep $app_name | grep -v grep | awk {'print $3*100'}`
#declare используется для того чтобы вывести значение переменной или функции, используется т.н. re-usable вывод, т.к. такой же как и при объявлении: выведенный код можно испольозвать для повторного объявления переменной/функции и т.д.
declare -i app_mem_have
declare -i app_mem
declare -i mem_limit
#условие вывод в файл, но можно задать любое условие.
app_mem_have=`ps aux | grep $app_name | grep -v grep | awk {'print $4*100'}`
#или сделать цикл
#while [ $app_cpu_have -gt 5360 ]
#do
if [[ $app_mem_have -gt $mem_limit ]];
then
echo ""$d" Утилизация mem превысила допустимую норму" >> mem.txt
else
echo ""$d" Утилизация mem не превышает допустимую норму" >> mem.txt
fi
#done
